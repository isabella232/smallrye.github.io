<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2022-02-09T11:09:27+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Fault Tolerance 5.3</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-3/" rel="alternate" type="text/html" title="Fault Tolerance 5.3" /><published>2022-02-08T16:00:00+00:00</published><updated>2022-02-08T16:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-3</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-3/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.3.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.3.0.
This release includes one big new feature, the programmatic API, and several smaller additions and fixes.
It should be a safe upgrade for everyone using SmallRye Fault Tolerance 5.2.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;programmatic_api&quot;&gt;Programmatic API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the very beginning, SmallRye Fault Tolerance has implemented the MicroProfile Fault Tolerance declarative, annotation-based API.
It also has several SmallRye-specific additions to this API, such as retry backoff strategies or circuit breaker maintenance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, SmallRye Fault Tolerance adds an alternative, programmatic API.
It has &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.3.0/usage/programmatic-api.html&quot;&gt;extensive documentation&lt;/a&gt;, so we&amp;#8217;ll just provide a short overview here.
Let&amp;#8217;s start with an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class MyService {
    private static final FaultTolerance&amp;lt;String&amp;gt; guard = FaultTolerance.&amp;lt;String&amp;gt;create()
        .withCircuitBreaker().done()
        .withFallback().handler(() -&amp;gt; &quot;fallback&quot;).done()
        .build();

    public String hello() throws Exception {
        return guard.call(externalService::hello);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The important part of this snippet is the &lt;code&gt;guard&lt;/code&gt; variable.
It contains a &lt;code&gt;FaultTolerance&lt;/code&gt; instance, which is basically a configured set of fault tolerance strategies.
The builder API allows creating the same fault tolerance strategies as the annotation-based API of MicroProfile Fault Tolerance.
Order of &lt;code&gt;with*&lt;/code&gt; method invocations doesn&amp;#8217;t matter, the fault tolerance strategies are ordered according to the MicroProfile Fault Tolerance specification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;FaultTolerance&lt;/code&gt; interface includes methods to run a &lt;code&gt;Callable&lt;/code&gt;, &lt;code&gt;Supplier&lt;/code&gt; or &lt;code&gt;Runnable&lt;/code&gt; and guard them.
That&amp;#8217;s what &lt;code&gt;guard.call(...)&lt;/code&gt; does in the body of the &lt;code&gt;hello&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;code&gt;FaultTolerance&lt;/code&gt; instance created like this may be used to guard multiple different actions.
If you only need to guard a single action, the previous example can be shortened to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class MyService {
    private final Callable&amp;lt;String&amp;gt; guard = FaultTolerance.createCallable(externalService::hello)
            .withCircuitBreaker().done()
            .withFallback().handler(() -&amp;gt; &quot;fallback&quot;).done()
            .build();

    public String hello() throws Exception {
        return guard.call();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly to the set of &lt;code&gt;FaultTolerance&lt;/code&gt; methods to guard various types of actions, there&amp;#8217;s a set of &lt;code&gt;create*&lt;/code&gt; static methods to create a &lt;code&gt;Callable&lt;/code&gt;, &lt;code&gt;Supplier&lt;/code&gt; or &lt;code&gt;Runnable&lt;/code&gt;. There&amp;#8217;s also a set of &lt;code&gt;createAsync*&lt;/code&gt; static methods to guard asynchronous actions using &lt;code&gt;CompletionStage&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mutiny_support&quot;&gt;Mutiny support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;smallrye-fault-tolerance-mutiny&lt;/code&gt; artifact, also described below in the section on additional async types, contains a &lt;code&gt;MutinyFaultTolerance&lt;/code&gt; interface.
That interface contains &lt;code&gt;create*&lt;/code&gt; static methods to guard asynchronous actions that return the Mutiny &lt;code&gt;Uni&lt;/code&gt; type.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The programmatic API has one feature that the declarative API doesn&amp;#8217;t have: ability to observe certain events.
For example, when configuring a circuit breaker, it is possible to register a callback for circuit breaker state changes or for a situation when an open circuit breaker prevents an invocation.
When configuring a timeout, it is possible to register a callback for when the invocation times out, etc. etc.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;private static final FaultTolerance&amp;lt;String&amp;gt; guard = FaultTolerance.&amp;lt;String&amp;gt;create()
    .withTimeout().duration(5, ChronoUnit.SECONDS).onTimeout(() -&amp;gt; ...).done()
    .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;circuit_breaker_maintenance&quot;&gt;Circuit breaker maintenance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s one exception to the above claim that the declarative API isn&amp;#8217;t able to observe events.
With this release, &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt; gains a method to observe circuit breaker state changes.
No other events are exposed to the declarative API at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the programmatic API also has a method to obtain &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt;: &lt;code&gt;FaultTolerance.circuitBreakerMaintenance()&lt;/code&gt;.
This methods returns the same object that you can &lt;code&gt;@Inject&lt;/code&gt;, because circuit breakers created by the programmatic API and declarative API are stored in the same registry.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;inspecting_exception_causes&quot;&gt;Inspecting exception causes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@CircuitBreaker&lt;/code&gt;, &lt;code&gt;@Fallback&lt;/code&gt; and &lt;code&gt;@Retry&lt;/code&gt; fault tolerance strategies allow declaring the set of exception types for which the strategy should apply (or be ignored).
When an exception is thrown, its class is checked for presence in one of these sets, and the strategy behaves accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This works fine, until wrapper exceptions come to play.
In certain contexts, the true exceptions are often (or always) wrapped into another exception.
In such situation, configuring when a fault tolerance strategy should apply or be ignored becomes nearly impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, SmallRye Fault Tolerance adds a non-standard feature to solve this problem.
In the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.3.0/usage/extra.html#_non_compatible_mode&quot;&gt;non-compatible mode&lt;/a&gt;, if the class of the thrown exception isn&amp;#8217;t present in either of the two sets, the cause chain of the exception is inspected automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;revamped_async_types_support&quot;&gt;Revamped async types support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance offers support for more asynchronous types than just MicroProfile Fault Tolerance mandated &lt;code&gt;CompletionStage&lt;/code&gt;.
So far, that support was based on the SmallRye Reactive Converters project, because that offers conversion between &lt;code&gt;CompletionStage&lt;/code&gt; and other types.
Asynchronous implementations of fault tolerance strategies in SmallRye Fault Tolerance are based on &lt;code&gt;CompletionStage&lt;/code&gt;, so that seems like a natural fit, but it has one issue.
In case the other async type is lazy (which is always the case with RxJava, Mutiny or Reactor), resubscription doesn&amp;#8217;t work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the dependency on SmallRye Reactive Converters is dropped.
Instead, SmallRye Fault Tolerance has its own set of support libraries for various reactive types.
These support libraries convert between types lazily, so resubscription works properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifically, there&amp;#8217;s &lt;code&gt;smallrye-fault-tolerance-mutiny&lt;/code&gt; for Mutiny and &lt;code&gt;smallrye-fault-tolerance-rxjava3&lt;/code&gt; for RxJava 3. Support for RxJava 1, RxJava 2 and Reactor was dropped, but may easily be added back if there&amp;#8217;s a need.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use &lt;code&gt;@Fallback&lt;/code&gt; with a &lt;code&gt;FallbackHandler&lt;/code&gt; class, you might have found that such fallback handler triggers a validation error when guarding methods that declare a primitive return type (or &lt;code&gt;void&lt;/code&gt;).
This has been fixed.
A &lt;code&gt;FallbackHandler&lt;/code&gt; that declares a wrapper type (such as &lt;code&gt;java.lang.Integer&lt;/code&gt;) now correctly matches a corresponding primitive type (such as &lt;code&gt;int&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrade to 5.3.0 is very much recommended.
As described above, there are certain new things, so if you encounter any bugs, please let us know in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;issue tracker&lt;/a&gt;!
We&amp;#8217;d be specifically interested in any feedback on the programmatic API.
This is very new, so you have a unique chance to influence its future!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Log4j2 Vulnerability and SmallRye</title><link href="https://www.smallrye.io/blog/log4j2-vulnerability/" rel="alternate" type="text/html" title="Log4j2 Vulnerability and SmallRye" /><published>2021-12-13T12:00:00+00:00</published><updated>2021-12-13T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/log4j2-vulnerability</id><content type="html" xml:base="https://www.smallrye.io/blog/log4j2-vulnerability/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Thursday (December 9th), a 0-day exploit in the popular Java logging library log4j (version 2) was discovered that
results in Remote Code Execution (RCE) by logging a certain string. Please check the following links for additional
information on this vulnerability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-44228&quot;&gt;CVE-2021-44228 Detail&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/advisories/GHSA-jfh8-c2jp-5v3q&quot;&gt;Remote code injection in Log4j&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lunasec.io/docs/blog/log4j-zero-day/&quot;&gt;Log4Shell: RCE 0-day exploit found in log4j 2, a popular Java logging package&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;If you are using &lt;code&gt;log4j2&lt;/code&gt;, or have it available in your runtime we advise you to update it to &lt;code&gt;2.15.0&lt;/code&gt; as soon as
possible.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_does_this_mean_for_smallrye&quot;&gt;What does this mean for SmallRye?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye libraries do not include or use any &lt;code&gt;log4j&lt;/code&gt; artifacts in their runtime dependencies. Below you can find a
detailed report for each SmallRye dependency (we used the Maven Dependency Plugin to search for possible inclusions):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;smallrye-async-api&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-common&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-context-propagation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-converters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-fault-tolerance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-graphql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-health&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-jwt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-maven-plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-mutiny&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-mutiny-vertx-bindings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-mutiny-zero&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-open-api&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-opentelemetry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-opentracing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-parent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-reactive-converters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-reactive-messaging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-safer-annotations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-stork&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;/assets/content/2021-12-12-log4j2-report.txt&quot;&gt;SmallRye Dependency Log4j2 Report&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The command used was &lt;code&gt;mvn org.apache.maven.plugins:maven-dependency-plugin:2.8:tree -Dincludes=org.apache.logging.log4j::: -Dverbose&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We were able to find that &lt;code&gt;smallrye-reactive-messaging-kafka&lt;/code&gt; and &lt;code&gt;smallrye-stork-service-discovery-eureka&lt;/code&gt; reference
&lt;code&gt;log4j2&lt;/code&gt; artifacts, but only in the &lt;code&gt;test&lt;/code&gt; scope, so this is not an issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, since all SmallRye projects receive &lt;code&gt;dependabot&lt;/code&gt; updates, we can detect any possible updates to
&lt;code&gt;log4j2&lt;/code&gt; dependencies with the following &lt;a href=&quot;https://github.com/pulls?q=is%3Apr+author%3Aapp%2Fdependabot+user%3Asmallrye+log4j+in%3Atitle&quot;&gt;Github Report&lt;/a&gt;. Indeed, there were two
updates sent by &lt;code&gt;dependabot&lt;/code&gt; to &lt;code&gt;smallrye-mutiny-vertx-bindings&lt;/code&gt;, but these updates target the dependencies of a Maven
plugin execution, so again, not an issue for runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional_information&quot;&gt;Additional Information&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if SmallRye itself is not directly affected by this vulnerability, the runtime where you are running may be
compromised. Check if this is the case and upgrade the &lt;code&gt;log4j2&lt;/code&gt; version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to reach out to the SmallRye team if you experience any issue with any of the SmallRye libraries to
the &lt;a href=&quot;mailto:smallrye@googlegroups.com&quot;&gt;SmallRye Mailing List&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Roberto Cortez</name><email>radcortez@yahoo.com</email></author><category term="log4j2" /><category term="smallrye" /></entry><entry><title type="html">Fault Tolerance 5.2.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-2-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.2.1" /><published>2021-07-16T13:00:00+00:00</published><updated>2021-07-16T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-2-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-2-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.2.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.2.1.
This is a small release with one bug fix.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.2.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/fault-tolerance-5-0/&quot;&gt;SmallRye Fault Tolerance 5.0&lt;/a&gt;, we introduced support for the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations.
From SmallRye Fault Tolerance perspective, these annotations make sense for methods that return an async type, such as &lt;code&gt;CompletionStage&lt;/code&gt; or &lt;code&gt;Uni&lt;/code&gt;.
Naturally, we added validation, so that if the annotation was present on a method with some other return type, deployment would fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is actually problematic, because these annotations are generic.
They are used by other frameworks and libraries (such as SmallRye Reactive Messaging or RESTEasy Reactive).
In such case, SmallRye Fault Tolerance should just ignore them.
However, if the annotation was present on a method that also applied some fault tolerance annotation, SmallRye Fault Tolerance would run the validation and fail the deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the validation is simply removed.
SmallRye Fault Tolerance can&amp;#8217;t know if the annotation is meant for some other framework or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, we fixed some typos in the documentation.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.2</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-2/" rel="alternate" type="text/html" title="Fault Tolerance 5.2" /><published>2021-07-02T14:00:00+00:00</published><updated>2021-07-02T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-2</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-2/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.2.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.2.0.
This release includes several new features and fixes.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.1.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;backoff_strategies_for_retry&quot;&gt;Backoff strategies for &lt;code&gt;@Retry&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@Retry&lt;/code&gt; annotation in MicroProfile Fault Tolerance supports a single backoff strategy: constant.
That is, the delay between all retry attempts is identical (with the exception of a random jitter).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance now offers 3 annotations to specify a different backoff strategy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ExponentialBackoff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@FibonacciBackoff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@CustomBackoff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of these annotations may be present on a program element annotated &lt;code&gt;@Retry&lt;/code&gt;, and it modifies the retry behavior.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package com.example;

@ApplicationScoped
public class MyService {
    @Retry
    @ExponentialBackoff
    public void hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With &lt;code&gt;@ExponentialBackoff&lt;/code&gt;, the delays between retry attempts will grow exponentially.
With &lt;code&gt;@FibonacciBackoff&lt;/code&gt;, the delays will grow per the Fibonacci sequence.
With &lt;code&gt;@CustomBackoff&lt;/code&gt;, it is possible to implement completely custom backoff strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#_backoff_strategies_for_retry&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;blocking_and_nonblocking_on_classes&quot;&gt;&lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; on classes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, we only documented (and tested) the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations on methods.
However, these annotations can be placed on classes as well, so in this release, we documented that and tightened some validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, if you addded both of these annotations to the same method, SmallRye Fault Tolerance wouldn&amp;#8217;t complain, even though this is clearly a mistake.
This situation is now detected and application deployment ends with an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if one of these annotations is placed on a class and the other on a method, that is a perfectly valid situation.
In such case, the annotation on method has priority over the one on class.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package com.example;

@ApplicationScoped
@NonBlocking
public class MyService {
    @Retry
    @Blocking
    public void hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the &lt;code&gt;hello&lt;/code&gt; method is treated as &lt;code&gt;@Blocking&lt;/code&gt;, but other methods would inherit the &lt;code&gt;@NonBlocking&lt;/code&gt; annotation from the class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#blocking-nonblocking&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;non_compatible_mode_for_determining_asynchrony&quot;&gt;Non-compatible mode for determining asynchrony&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the &lt;code&gt;@Asynchronous&lt;/code&gt;, &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations, SmallRye Fault Tolerance now offers a mode where method asynchrony is determined solely from the its return type.
This mode is &lt;strong&gt;not compatible&lt;/strong&gt; with the MicroProfile Fault Tolerance specification and doesn&amp;#8217;t pass 2 tests in the TCK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that reason, this mode is disabled by default.
To enable it, set the configuration property &lt;code&gt;smallrye.faulttolerance.mp-compatibility&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the non-compatible mode is enabled, methods that have some fault tolerance strategy and return &lt;code&gt;CompletionStage&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; be offloaded to a thread pool, yet will have asynchronous fault tolerance applied automatically.
In other words, they will be treated as if they were annotated &lt;code&gt;@NonBlocking&lt;/code&gt;.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyService {
    @Retry
    CompletionStage&amp;lt;String&amp;gt; hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;hello&lt;/code&gt; method here will be executed on the original thread (as if it was annotated &lt;code&gt;@NonBlocking&lt;/code&gt;) and will have asynchronous fault tolerance applied.
That is, if the returned &lt;code&gt;CompletionStage&lt;/code&gt; completes with an exception, it will be retried.
(Per the MicroProfile Fault Tolerance specification, retry shouldn&amp;#8217;t happen in such case.
The compatible mode conforms to the specification, but we find that behavior less and less appropriate.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus will enable this mode by default in the 2.1.0.Final release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#_non_compatible_mode&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Together with the new features described above, we have also performed a major internal refactoring.
The configuration system, the single last remnant of SmallRye Fault Tolerance 2.x, has been rewritten from scratch.
Instead of storing configuration values into a &lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;, the new system is based on configuration interfaces.
Implementations of these interfaces are automatically generated during SmallRye Fault Tolerance build, using an annotation processor.
See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/internals/config.html&quot;&gt;the documentation&lt;/a&gt; for more details if you&amp;#8217;re interested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, we have fixed a small bug in &lt;code&gt;@Fallback&lt;/code&gt; validation.
If you had a method guarded with &lt;code&gt;@Fallback&lt;/code&gt; that returned a raw type (such as &lt;code&gt;List&lt;/code&gt;), and its fallback method retured a parameterized type (such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;), the validation code would enter an infinite regress.
This case is now handled properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrade to 5.2.0 is very much recommended.
As described above, there are certain new things, so if you encounter any bugs, please let us know in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;issue tracker&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.1" /><published>2021-05-18T08:00:00+00:00</published><updated>2021-05-18T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-1/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.1.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.1.0.
This release includes some important bug fixes and one new feature.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.0.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java_16_support&quot;&gt;Java 16 support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance includes a small utility class that helps calling &lt;code&gt;default&lt;/code&gt; methods when they are declared as fallback methods with &lt;code&gt;@Fallback&lt;/code&gt;.
This class uses reflection to crack open some internal JDK classes on Java 8.
Naturally, since Java 9, the JDK started complaining, and since Java 16, this became an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that reason, we have a variant of that utility class that uses Java 9 public API, and the main SmallRye Fault Tolerance JAR has, for a long time, been a multi-release JAR.
Unfortunately, we introduced a bug in SmallRye Fault Tolerance 4.3.1.
This bug causes the main SmallRye Fault Tolerance JAR to omit the &lt;code&gt;META-INF/versions/9&lt;/code&gt; directory, and so the Java 8 variant of the class is the only one present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the 5.1.0 release, we fixed that bug and made sure the SmallRye Fault Tolerance release process is executed with Java 11.
Hence, SmallRye Fault Tolerance should once again work as intended on all Java versions, particularly on Java 16.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that even though we run the release process with Java 11, we still produce Java 8 bytecode.
Java 8 is still supported with SmallRye Fault Tolerance 5.1.0, even though we may drop this support in future versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;vert_x_integration&quot;&gt;Vert.x integration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In certain situations, SmallRye Fault Tolerance runs &lt;code&gt;@NonBlocking&lt;/code&gt; methods on a different thread than the original call was made on.
This includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Retry&lt;/code&gt; methods, where a non-zero retry delay is configured (the delay must not block);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Bulkhead&lt;/code&gt; methods, where a non-zero bulkhead queue is configured (if the invocation is queued).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, we run such guarded methods on a thread pool provided by the integrator.
In this release, we provide an integration API for event loops, as well as an implementation of this API for Vert.x.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this integration enabled, invocations of &lt;code&gt;@NonBlocking&lt;/code&gt; methods made on an event loop thread are always executed on the same event loop thread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.1.0/usage/extra.html#blocking-nonblocking&quot;&gt;user documentation&lt;/a&gt; and &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.1.0/integration/event-loop.html&quot;&gt;integration documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have also significantly expanded our CI coverage.
We now run tests with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all Java LTS releases we care about (at this moment, Java 8 and 11);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the latest Java release (at this moment, Java 16);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the upcoming Java release (at this moment, Java 17-ea).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of this on Linux, Windows and macOS, thanks to GitHub Actions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(In fact, we currently don&amp;#8217;t run tests with Java 17-ea, because of &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues/412&quot;&gt;a bug&lt;/a&gt; in JBoss Class File Writer. That should be resolved shortly, and we are not aware of any other issue with Java 17-ea.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this CI coverage expansion, we found and fixed a particularly nasty concurrency issue in handling &lt;code&gt;@Timeout&lt;/code&gt;s on &lt;code&gt;Future&lt;/code&gt;-returning methods when &lt;code&gt;@Retry&lt;/code&gt; is present.
&lt;code&gt;@Bulkhead&lt;/code&gt;s on &lt;code&gt;Future&lt;/code&gt;-returning methods, in presence of &lt;code&gt;@Retry&lt;/code&gt;, were fixed as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrade to 5.1.0 is therefore very much recommended!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-0/" rel="alternate" type="text/html" title="Fault Tolerance 5.0" /><published>2021-01-18T08:00:00+00:00</published><updated>2021-01-18T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Roughly a year ago, we &lt;a href=&quot;/blog/fault-tolerance-4-0/&quot;&gt;announced&lt;/a&gt; the release of SmallRye Fault Tolerance 4.0, the new implementation of Eclipse MicroProfile Fault Tolerance.
Today, we bring you version 5.0, an evolution of the 4.x stream that fully implements MicroProfile Fault Tolerance 3.0 and brings a lot of improvements and even new features.
These new features are not present in the MicroProfile Fault Tolerance specification, but were requested by users, especially in the Quarkus community.
In addition, the API for integrators has been simplified significantly, and the first version of &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/index.html&quot;&gt;documentation&lt;/a&gt; is also ready.
Let&amp;#8217;s take a look.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;microprofile_fault_tolerance_3_0&quot;&gt;MicroProfile Fault Tolerance 3.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From user&amp;#8217;s perspective, MicroProfile Fault Tolerance 3.0 is a relatively small release, including just two important changes: metrics overhaul, and lifecycle specification for circuit breakers and bulkheads.
It is a major release because the metrics changes are very much backwards incompatible, so pay attention to that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;metrics_overhaul&quot;&gt;Metrics overhaul&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fault tolerance metrics now take advantage of tags.
Most importantly, the full method name used to be a part of the metric name, but it&amp;#8217;s now a metric tag.
For example, suppose we have a method guarded with the &lt;code&gt;@Timeout&lt;/code&gt; strategy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@Singleton
public class MyService {
    @Timeout
    public String hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, if you wanted to know how many times this method timed out, you&amp;#8217;d have to look at the metric called &lt;code&gt;ft.com.example.MyService.hello.timeout.callsTimedOut.total&lt;/code&gt;.
With MicroProfile Fault Tolerance 3.0, you need to look at &lt;code&gt;ft.timeout.calls.total{method=&quot;com.example.MyService.hello&quot;, timedOut=&quot;true&quot;}&lt;/code&gt; instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find all the new metric names and possible tags in the &lt;a href=&quot;https://download.eclipse.org/microprofile/microprofile-fault-tolerance-3.0/microprofile-fault-tolerance-spec-3.0.html#_integration_with_microprofile_metrics&quot;&gt;MicroProfile Fault Tolerance 3.0 specification&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, fault tolerance metrics moved from the &lt;code&gt;application&lt;/code&gt; scope to &lt;code&gt;base&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lifecycle_specification_for_circuit_breakers_and_bulkheads&quot;&gt;Lifecycle specification for circuit breakers and bulkheads&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, MicroProfile Fault Tolerance didn&amp;#8217;t specify lifecycle for stateful fault tolerance strategies, that is, circuit breakers and bulkheads.
This becomes important when you have &lt;code&gt;@RequestScoped&lt;/code&gt; beans, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@RequestScoped
public class MyService {
    @CircuitBreaker
    public String hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You get a new instance of the bean for each request, and the MicroProfile Fault Tolerance specification didn&amp;#8217;t say whether all such instances share the same circuit breaker for the &lt;code&gt;hello&lt;/code&gt; method, or if each instance has its own.
The specification now mandates that all instances share the same circuit breaker.
Bulkheads behave identically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This behavior was actually implemented by SmallRye Fault Tolerance since the beginning, so no behavioral change for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;smallrye_fault_tolerance_improvements&quot;&gt;SmallRye Fault Tolerance improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SmallRye Fault Tolerance 5.0 release brings a lof of additional improvements, both internal and user-facing.
Changes that concern SmallRye Fault Tolerance integrators are described in more detail in a subsequent section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;circuit_breaker_maintenance&quot;&gt;Circuit breaker maintenance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have previously &lt;a href=&quot;/blog/fault-tolerance-4-2-and-4-3/&quot;&gt;introduced&lt;/a&gt; a way to observe circuit breaker state changes, using the &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; CDI event.
This was subsequently &lt;a href=&quot;/blog/fault-tolerance-4-3-1/&quot;&gt;deprecated&lt;/a&gt;, because we found a better way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; CDI event is removed, and a new API for circuit breaker maintenance is introduced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Circuit breakers can now be given a name using the &lt;code&gt;@CircuitBreakerName&lt;/code&gt; annotation.
Afterwards, you can &lt;code&gt;@Inject&lt;/code&gt; a &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt; and use its &lt;code&gt;currentState&lt;/code&gt; method to obtain current status of the circuit breaker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt; also allows you to reset any given named circuit breaker (&lt;code&gt;reset&lt;/code&gt;), or all circuit breakers (&lt;code&gt;resetAll&lt;/code&gt;), to the initial state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/usage/extra.html#_circuit_breaker_maintenance&quot;&gt;documentation&lt;/a&gt; for more information and examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;blocking_and_nonblocking&quot;&gt;&lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the MicroProfile Fault Tolerance &lt;code&gt;@Asynchronous&lt;/code&gt; annotation, we also introduce support for the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations from SmallRye Common.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@Blocking&lt;/code&gt; means that the annotated method blocks and hence its execution must be offloaded to another thread.
This is basically equivalent to &lt;code&gt;@Asynchronous&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, &lt;code&gt;@NonBlocking&lt;/code&gt; means that the annotated method doesn&amp;#8217;t block and hence execution &lt;em&gt;doesn&amp;#8217;t&lt;/em&gt; have to be moved to another thread, yet all asynchronous fault tolerance behaviors are still supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that these annotations are only taken into account if the annotated method also applies some other fault tolerance strategy, such as &lt;code&gt;@Fallback&lt;/code&gt; or &lt;code&gt;@Retry&lt;/code&gt;, &lt;em&gt;and&lt;/em&gt; if the method returns &lt;code&gt;CompletionStage&lt;/code&gt; (or some of the additional asynchronous types as described below).
If there&amp;#8217;s no fault tolerance annotation, or if the method doesn&amp;#8217;t return &lt;code&gt;CompletionStage&lt;/code&gt;, SmallRye Fault Tolerance will ignore the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations completely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/usage/extra.html#blocking-nonblocking&quot;&gt;documentation&lt;/a&gt; for more information and examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additional_asynchronous_types&quot;&gt;Additional asynchronous types&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to &lt;code&gt;CompletionStage&lt;/code&gt;, SmallRye Fault Tolerance now supports additional asynchronous types from libraries such as RxJava, Mutiny or Reactor.
Note that only single-valued types, such as &lt;code&gt;Single&lt;/code&gt; or &lt;code&gt;Uni&lt;/code&gt;, are supported; stream-like types are not, because their semantics can&amp;#8217;t be easily expressed in terms of &lt;code&gt;CompletionStage&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This support is based on the &lt;a href=&quot;https://github.com/smallrye/smallrye-reactive-utils/tree/main/reactive-converters&quot;&gt;SmallRye Reactive Converters&lt;/a&gt; project, so you have to make sure that the corresponding converter library is present.
Integrators may include some converters by default if they choose so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/usage/extra.html#_additional_asynchronous_types&quot;&gt;documentation&lt;/a&gt; for more information and examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;other_improvements&quot;&gt;Other improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Exception handling in half-open circuit breakers was fixed.
Previously, half-open circuit breakers would treat all exceptions as failures, which is wrong.
Even in the half-open state, circuit breakers have to consider the &lt;code&gt;failOn&lt;/code&gt; and &lt;code&gt;skipOn&lt;/code&gt; configuration.
This bug was not caught, because the MicroProfile Fault Tolerance TCK doesn&amp;#8217;t have a test.
That is something we are also going to fix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Circuit breakers were also improved to reject excess attempts in the half-open state.
Previously, half-open circuit breakers would allow all invocations to go through, which kinda defeats the purpose of the half-open state.
This was improved to only allow the first &lt;code&gt;successThreshold&lt;/code&gt; invocations (also called &quot;probe invocations&quot;); the excess ones are outright rejected.
It is only after moving to the closed state when all invocations are allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All &lt;code&gt;CompletionStage&lt;/code&gt; fault tolerance strategies were examined and improved to avoid premature thread offload.
This was required for the &lt;code&gt;@NonBlocking&lt;/code&gt; support described above, but it&amp;#8217;s also an important optimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thread pool usage was radically improved.
Previously, SmallRye Fault Tolerance would use 1 thread pool for executing &lt;code&gt;@Asynchronous&lt;/code&gt; methods, 1 thread pool for watching for timeouts, and 1 thread pool for each thread pool style bulkhead.
Now, SmallRye Fault Tolerance uses a single thread pool for everything.
Thread pool style bulkheads were also significantly optimized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The metrics subsystem was completely rewritten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Trace logging has been added for all core implementations of fault tolerance strategies.
We also started using &lt;a href=&quot;https://jboss-logging.github.io/jboss-logging-tools/&quot;&gt;JBoss Logging Tools&lt;/a&gt; to generate logger implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;integration_changes&quot;&gt;Integration changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How SmallRye Fault Tolerance can be integrated into a runtime has changed in two important ways: the thread pool integration is now based on CDI, and some additional dependencies are required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, the thread pool integration was based on &lt;code&gt;ServiceLoader&lt;/code&gt;.
Integrators had to provide implementation of the &lt;code&gt;ExecutorFactory&lt;/code&gt; interface, which allowed customizing how all the different thread pools are created.
With the 5.0 release, SmallRye Fault Tolerance no longer insists on creating its own thread pools.
Instead, it works with a single thread pool and expects integrator to provide it via CDI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do that, integrators should provide a CDI bean implementing the &lt;code&gt;AsyncExecutorProvider&lt;/code&gt; interface.
This implementation should be &lt;code&gt;@Singleton&lt;/code&gt;, must be marked as alternative and selected globally for the application.
The interface has one method that returns the thread pool which the integrator desires to use for fault tolerance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the integrator doesn&amp;#8217;t want to manage their own thread pool for fault tolerance, they can subclass &lt;code&gt;DefaultAsyncExecutorProvider&lt;/code&gt;.
This at least allows customizing the &lt;code&gt;ThreadFactory&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described above, the SmallRye Reactive Converters project is used to add support for additional asynchronous types.
This means that SmallRye Fault Tolerance requires the &lt;code&gt;io.smallrye.reactive:smallrye-reactive-converter-api&lt;/code&gt; artifact to be present.
Presence of Reactive Converter API implementations is optional, but the API itself is mandatory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/integration/intro.html&quot;&gt;integration documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking back at the &lt;a href=&quot;/blog/fault-tolerance-4-0/&quot;&gt;4.0 announcement&lt;/a&gt;, we have since implemented almost all the planned improvements in SmallRye Fault Tolerance internals.
On the other hand, the user-facing improvements we planned had to be postponed&amp;#8201;&amp;#8212;&amp;#8201;but we implemented other user-facing improvements instead.
We still intend to work on &lt;code&gt;@FailFast&lt;/code&gt; or &lt;code&gt;@AdaptiveBulkhead&lt;/code&gt;, but feature requests or bug reports by actual users will always have priority.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that in mind, please don&amp;#8217;t hesitate to get in touch.
You can use the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;SmallRye Fault Tolerance issue tracker&lt;/a&gt;, the &lt;a href=&quot;https://quarkusio.zulipchat.com&quot;&gt;Zulip Chat&lt;/a&gt;, the &lt;a href=&quot;https://gitter.im/smallrye-io/fault-tolerance&quot;&gt;SmallRye Fault Tolerance Gitter&lt;/a&gt;, or the &lt;a href=&quot;mailto:smallrye@googlegroups.com&quot;&gt;SmallRye mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 4.3.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-4-3-1/" rel="alternate" type="text/html" title="Fault Tolerance 4.3.1" /><published>2020-09-29T13:00:00+00:00</published><updated>2020-09-29T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-4-3-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-4-3-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/4.3.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 4.3.1.
This is a small release with a couple of bug fixes and one API deprecation.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 4.3.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the previous release, we introduced an experimental API for observing circuit breaker state changes.
The &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; event type is now deprecated and will be removed in a subsequent release.
At the same time, we will introduce a new API for accessing circuit breaker maintenance features: observing its current state and resetting to the initial state.
If you want to know more, feel free to watch &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues/280&quot;&gt;issue #280&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, to slightly improve quality of life, starting with this release, SmallRye Fault Tolerance will log its version number during boot.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">SmallRye Config 1.9 Released</title><link href="https://www.smallrye.io/blog/smallrye-config-1-9/" rel="alternate" type="text/html" title="SmallRye Config 1.9 Released" /><published>2020-09-24T12:00:00+00:00</published><updated>2020-09-24T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/smallrye-config-1-9</id><content type="html" xml:base="https://www.smallrye.io/blog/smallrye-config-1-9/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SmallRye Config 1.9 we continue our innovation and experimentation model, by bringing additional features and
enhancements to the API. This release introduces the following big changes:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;config_mappings&quot;&gt;Config Mappings&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Config Mapping provides a way to group multiple configuration properties into a single cohesive API. A Config Mapping
requires a simple interface with minimal metadata configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ConfigMapping(prefix = &quot;server&quot;)
interface Server {
    String host();

    int port();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Server&lt;/code&gt; interface retrieves and maps configuration properties with the name &lt;code&gt;server.host&lt;/code&gt; into the
&lt;code&gt;Server.host()&lt;/code&gt; and &lt;code&gt;server.port&lt;/code&gt; into &lt;code&gt;Server.port()&lt;/code&gt; method. The configuration property name to lookup
builds from the &lt;code&gt;@ConfigMapping&lt;/code&gt; annotation prefix and the method name with &lt;code&gt;.&lt;/code&gt; (dot) as the separator. The
&lt;code&gt;@ConfigMapping&lt;/code&gt; annotation is used to auto-discover and register these mapping interfaces in a CDI aware environment.
In non-CDI environments, register the Config Mapping via &lt;code&gt;SmallRyeConfigBuilder#withMapping&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To retrieve such Config Mapping, a simple &lt;code&gt;@Inject&lt;/code&gt; in any CDI aware bean is enough:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@Inject
Server server;

void businessMethod() {
    String host = server.host();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To retrieve the Config Mapping in non-CDI environments use the API
&lt;code&gt;io.smallrye.config.SmallRyeConfig#getConfigMapping&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;SmallRyeConfig config = (SmallRyeConfig) ConfigProvider.getConfig();
Server server = config.getConfigMapping(Server.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, Config Mappings also support:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Automatic conversion of the configuration type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nested Config Mapping groups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Validate if configuration properties exist at the startup.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Optional&lt;/code&gt;, and primitive types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@WithName&lt;/code&gt; to override the property name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@WithConverter&lt;/code&gt; to override the converter to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@WithDefault&lt;/code&gt; to set the default value if none is found in the config sources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Combining all of these features, we can write a Config Mapping that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ConfigMapping(prefix = &quot;server&quot;)
public interface Server {
    String host();

    int port();

    @WithConverter(DurationConverter.class)
    Duration timeout();

    @WithName(&quot;io-threads&quot;)
    int threads();

    Map&amp;lt;String, String&amp;gt; form();

    Optional&amp;lt;Ssl&amp;gt; ssl();

    Optional&amp;lt;Proxy&amp;gt; proxy();

    Log log();

    interface Ssl {
        int port();

        String certificate();

        @WithDefault(&quot;TLSv1.3,TLSv1.2&quot;)
        List&amp;lt;String&amp;gt; protocols();
    }

    interface Proxy {
        boolean enable();
    }

    interface Log {
        @WithDefault(&quot;false&quot;)
        boolean enabled();

        @WithDefault(&quot;.log&quot;)
        String suffix();

        @WithDefault(&quot;true&quot;)
        boolean rotate();

        @WithDefault(&quot;COMMON&quot;)
        Pattern pattern();

        enum Pattern {
            COMMON,
            SHORT,
            COMBINED,
            LONG;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For additional information, check out our documentation about
&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/mapping/mapping.html&quot;&gt;Config Mappings&lt;/a&gt; and the example in the
&lt;a href=&quot;https://github.com/smallrye/smallrye-config/tree/main/examples/mapping&quot; class=&quot;bare&quot;&gt;https://github.com/smallrye/smallrye-config/tree/main/examples/mapping&lt;/a&gt; SmallRye Config Github repo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In MicroProfile Config 2.0, an initial version for this feature will be available. It doesn&amp;#8217;t support all the features
implemented in SmallRye Config, but the plan is to keep evolving and add more functionality based on the feedback of
the community. You can read more about it
&lt;a href=&quot;https://github.com/eclipse/microprofile-config/blob/main/spec/src/main/asciidoc/configexamples.asciidoc&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configurable_config_sources&quot;&gt;Configurable Config Sources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A highly requested feature is the ability to configure custom Config Sources, meaning it should be possible to
retrieve configuration values from other sources before building our own. Take for instance a Database based Config
Source. Such a source requires additional configurations like URL, username, and password to connect to the database.
Where do we set these configurations?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new &lt;code&gt;ConfigSourceFactory&lt;/code&gt; API provides a context with access to the currently available configuration. With a
&lt;code&gt;ConfigSourceFactory&lt;/code&gt;, it is possible to bootstrap a &lt;code&gt;ConfigSource&lt;/code&gt; that configures itself with other sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ConfigSourceFactory&lt;/code&gt; requires the implementation of a single method
&lt;code&gt;ConfigSource getConfigSource(ConfigSourceContext context)&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@Override
public class ConfigMapConfigSourceFactory implements ConfigSourceFactory {
    @Override
    public ConfigSource getConfigSource(final ConfigSourceContext context) {
        final ConfigValue value = context.getValue(&quot;config.map.dir.source&quot;);
        if (value == null || value.getValue() == null) {
            throw new IllegalArgumentException(&quot;CONFIG_MAP_DIR_SOURCE not defined&quot;);
        }

        return new FileSystemConfigSource(value.getValue());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The provided &lt;code&gt;ConfigSourceContext&lt;/code&gt; may call a single method &lt;code&gt;ConfigValue getValue(String name)&lt;/code&gt;. This method lookups
configuration names in all sources already initialized by the &lt;code&gt;Config&lt;/code&gt; even if they have a lower priority than the one
defined in the &lt;code&gt;ConfigSourceFactory&lt;/code&gt;. A`ConfigSource` produced by a &lt;code&gt;ConfigSourceFactory&lt;/code&gt; is not taken into account to
configure other sources produced by lower priority &lt;code&gt;ConfigSourceFactory&lt;/code&gt;. To register a &lt;code&gt;ConfigSourceFactory&lt;/code&gt; use the
standard Java &lt;code&gt;ServiceLoader&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For additional information, check out our documentation about
&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/config-sources/config-sources.html#_config_source_factory&quot;&gt;Config Mappings&lt;/a&gt; and
the example in the
&lt;a href=&quot;https://github.com/smallrye/smallrye-config/tree/main/examples/configmap&quot; class=&quot;bare&quot;&gt;https://github.com/smallrye/smallrye-config/tree/main/examples/configmap&lt;/a&gt; SmallRye Config Github repo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;default_values&quot;&gt;Default Values&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Right now, the only way to set a default value for a configuration to use the
&lt;code&gt;org.eclipse.microprofile.config.inject.ConfigProperty#defaultValue&lt;/code&gt;. This has a few limitations. It doesn&amp;#8217;t work in the
programmatic lookup or if we are using the annotation and have to inject the same property in multiple places,
we need to duplicate the default value in each injection point. Adding the configuration values into
&lt;code&gt;microprofile-config.properties&lt;/code&gt; to act as a default is not optimal either, since they may override lower priority
custom sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Config adds a simple API to set such default values, with
&lt;code&gt;SmallRyeConfigBuilder#withDefaultValue(String name, String value)&lt;/code&gt; or
&lt;code&gt;SmallRyeConfigBuilder#withDefaultValue(Map&amp;lt;String, String&amp;gt; defaultValues)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Default values for any configuration name can then be supplied with these APIs. SmallRye Config will only fallback to
these default if no value is found in the available sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Default values API also supports name patterns. For instance a &lt;code&gt;withDefaultValue(&quot;smallrye.*&quot;, &quot;1234&quot;)&lt;/code&gt; provides
default values for any configuration name with the prefix &lt;code&gt;smallrye&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the new features detailed here are experimental. The team is happy with them, and they had careful consideration
when designed. We cannot guarantee that they won&amp;#8217;t suffer any changes in the next few releases, especially considering
that the SmallRye team is also pushing to have these added to the MicroProfile Config specification, which may require
some changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shouldn&amp;#8217;t discourage developers to use these new features. We believe these add a lot of utility and improve the
developer experience when setting configurations in applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A handful of other small improvements and bugs fixes are also included in this release. Check them out in the
&lt;a href=&quot;https://github.com/smallrye/smallrye-config/releases/tag/1.9.0&quot;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please, feel free to drop us any feedback to the &lt;a href=&quot;mailto:smallrye@googlegroups.com&quot;&gt;SmallRye Mailing List&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional_resources&quot;&gt;Additional Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/smallrye/smallrye-config/&quot;&gt;GitHub Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/smallrye/smallrye-config/releases/tag/1.9.0&quot;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/index.html&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Roberto Cortez</name><email>radcortez@yahoo.com</email></author><category term="microprofile" /><category term="smallrye" /><category term="config" /></entry><entry><title type="html">Fault Tolerance 4.2 &amp;amp; 4.3</title><link href="https://www.smallrye.io/blog/fault-tolerance-4-2-and-4-3/" rel="alternate" type="text/html" title="Fault Tolerance 4.2 &amp;amp; 4.3" /><published>2020-05-29T11:00:00+00:00</published><updated>2020-05-29T11:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-4-2-and-4-3</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-4-2-and-4-3/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce two new releases of SmallRye Fault Tolerance: 4.2.1 and 4.3.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4_2_1&quot;&gt;4.2.1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes bugfixes and component updates and is safe to use for everyone who uses Fault Tolerance 4.1.0, 4.1.1 and 4.2.0.
The 4.2.0 release happened a few weeks ago and didn&amp;#8217;t contain anything but bugfixes.
With 4.2.1, we now use MicroProfile Fault Tolerance 2.1.1, which includes some TCK fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is one small feature in the 4.2.1 release, which is interesting for integrators.
If you integrate SmallRye Fault Tolerance and provide your own &lt;code&gt;ExecutorFactory&lt;/code&gt;, you can now inherit from the &lt;code&gt;DefaultExecutorFactory&lt;/code&gt; class and override the &lt;code&gt;threadFactory&lt;/code&gt; method.
This allows customizing the most important property: how do the thread pools create their threads.
All the other thread pool settings will stay at the SmallRye Fault Tolerance defaults.
Of course, you can still provide a your own &lt;code&gt;ExecutorFactory&lt;/code&gt; and customize everything.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4_3_0&quot;&gt;4.3.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release builds on 4.2.1 and adds one new feature: you can now observe when circuit breakers change their state.
Let&amp;#8217;s first take a look at the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say we have a method &lt;code&gt;doWork&lt;/code&gt; which is guarded by a circuit breaker, presumably because it reaches out to some external service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyService {
    @CircuitBreaker(...)
    public void doWork() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, there are metrics for how often the circuit breaker trips etc., but you might want to observe when the circuit breaker state changes directly.
With SmallRye Fault Tolerance 4.3.0, that is now possible: circuit breaker state changes are emitted as CDI events.
With an event observer, it&amp;#8217;s easy to react to circuit breaker state changing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyServiceObserver {
    public void onStateChange(@Observes CircuitBreakerStateChanged event) {
        if (MyService.class.equals(event.clazz) &amp;amp;&amp;amp; &quot;doWork&quot;.equals(event.method.getName())) {
            System.out.println(&quot;!!! circuit breaker is now &quot; + event.targetState);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that in this example, we make one simplifying assumption: that the &lt;code&gt;MyService&lt;/code&gt; class only has &lt;em&gt;one&lt;/em&gt; method called &lt;code&gt;doWork&lt;/code&gt;.
If it had multiple &lt;code&gt;doWork&lt;/code&gt; methods, each having different signature and each having its own circuit breaker, we would have to distinguish between them in the observer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; event type includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the bean &lt;code&gt;clazz&lt;/code&gt;, as &lt;code&gt;java.lang.Class&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the guarded &lt;code&gt;method&lt;/code&gt;, as &lt;code&gt;java.lang.reflect.Method&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;targetState&lt;/code&gt; of the circuit breaker, as a simple enum &lt;code&gt;CircuitBreakerState&lt;/code&gt; with 3 values: &lt;code&gt;CLOSED&lt;/code&gt;, &lt;code&gt;OPEN&lt;/code&gt; and &lt;code&gt;HALF_OPEN&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;experimental_api&quot;&gt;Experimental API&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; and &lt;code&gt;CircuitBreakerState&lt;/code&gt; classes are meant for direct consumption by end users.
They are considered an experimental API, because we&amp;#8217;re trying to find out how to best provide this feature.
This also means that breaking changes are very much possible, when we learn how to improve the API.
Your feedback is very important here!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use a runtime such as Thorntail or Quarkus, they should provide you the correct dependency automatically, after they update to SmallRye Fault Tolerance 4.3.0. If you use SmallRye Fault Tolerance directly, you should note that these classes are located in a new artifact: &lt;code&gt;smallrye-fault-tolerance-api&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">SmallRye Config 1.8 Released</title><link href="https://www.smallrye.io/blog/smallrye-config-1-8/" rel="alternate" type="text/html" title="SmallRye Config 1.8 Released" /><published>2020-05-22T12:00:00+00:00</published><updated>2020-05-22T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/smallrye-config-1-8</id><content type="html" xml:base="https://www.smallrye.io/blog/smallrye-config-1-8/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Config version 1.8 was released a few days ago.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latest version of SmallRye Config introduced a few experimental changes to enhance the API and to make SmallRye
Config more extensible. One of the experimental changes is the new interceptor model, to intercept the lookup of a
configuration value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the_configsourceinterceptor&quot;&gt;The ConfigSourceInterceptor&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ConfigSourceInterceptor&lt;/code&gt; allows to intercept the resolution of a configuration name before the &lt;code&gt;Config&lt;/code&gt; resolves
the configuration value and before any conversion taking place. This is useful to implement features like
property expansion or configuration profiles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementations of &lt;code&gt;ConfigSourceInterceptor&lt;/code&gt; are loaded via the &lt;code&gt;java.util.ServiceLoader&lt;/code&gt; mechanism and can be
registered by providing a resource named &lt;code&gt;META-INF/services/io.smallrye.config.ConfigSourceInterceptor&lt;/code&gt;, which
contains the fully qualified &lt;code&gt;ConfigSourceInterceptor&lt;/code&gt; implementation class name as its content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A single method must be implemented, &lt;code&gt;ConfigValue getValue(ConfigSourceInterceptorContext context, String name)&lt;/code&gt;. The
&lt;code&gt;ConfigSourceInterceptorContext&lt;/code&gt; is used to proceed with the interceptor chain. The chain can be short-circuited by
returning an instance of &lt;code&gt;ConfigValue&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public interface ConfigSourceInterceptor extends Serializable {
    ConfigValue getValue(ConfigSourceInterceptorContext context, String name);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ConfigValue&lt;/code&gt; objects hold information about the key name, value, config source origin, and ordinal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the &lt;code&gt;ConfigSourceInterceptor&lt;/code&gt; may also intercept resolution of configuration names or configuration
values with the methods &lt;code&gt;Iterator&amp;lt;String&amp;gt; iterateNames(ConfigSourceInterceptorContext context)&lt;/code&gt; and
&lt;code&gt;Iterator&amp;lt;ConfigValue&amp;gt; iterateValues(ConfigSourceInterceptorContext context)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Interceptor chain applies before any conversion takes place.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Interceptor API, it becomes trivial to implement a logging mechanism and to find out which &lt;code&gt;ConfigSource&lt;/code&gt;
loaded the resolved config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class LoggingConfigSourceInterceptor implements ConfigSourceInterceptor {
    private static final Logger LOG = Logger.getLogger(&quot;io.smallrye.config&quot;);

    @Override
    public ConfigValue getValue(final ConfigSourceInterceptorContext context, final String name) {
        final ConfigValue configValue = context.proceed(name);
        final String key = configValue.getName();
        final String value = configValue.getValue();
        final String configSource = configValue.getConfigSourceName();

        LOG.infov(&quot;The key {0} was loaded from {1} with the value {2}&quot;, key, configSource, value);

        return configValue;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Config does ship with its own logging interceptor, so you don&amp;#8217;t need to implement one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;built_in_interceptors&quot;&gt;Built-In Interceptors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Config provides the following built-in interceptors to expand its feature set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RelocateConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProfileConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ExpressionConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FallbackConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LoggingConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SecretKeyConfigSourceInterceptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not every interceptor is registered by default. Only the &lt;code&gt;ProfileConfigSourceInterceptor&lt;/code&gt;,
&lt;code&gt;ExpressionConfigSourceInterceptor&lt;/code&gt; and &lt;code&gt;SecretKeyConfigSourceInterceptor&lt;/code&gt; are added on new instances of &lt;code&gt;Config&lt;/code&gt;.
Other interceptors require manual registration via the &lt;code&gt;ServiceLoader&lt;/code&gt; mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To learn more about all the built-in interceptors, please refer to the
&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/interceptors/interceptors.html#_built_in_interceptors&quot;&gt;documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;expression_expansion&quot;&gt;Expression Expansion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ExpressionConfigSourceInterceptor&lt;/code&gt; provides expression expansion on configuration values. An expression string is
a mix of plain strings and expression segments, which are wrapped into &lt;code&gt;${ &amp;#8230;&amp;#8203; }&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, consider the following configuration properties file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot; class=&quot;language-properties hljs&quot;&gt;my.prop=1234
expression=${my.prop}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then the &lt;code&gt;expression&lt;/code&gt; configuration will be resolved and expanded to the value &lt;code&gt;1234&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the expression expansion engine supports the following segments:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${expression:value}&lt;/code&gt; - Provides a default value after the &lt;code&gt;:&lt;/code&gt; if the expansion doesn&amp;#8217;t find a value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${my.prop${compose}}&lt;/code&gt; - Composed expressions. Inner expressions are resolved first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${my.prop}${my.prop}&lt;/code&gt; - Multiple expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuration_profiles&quot;&gt;Configuration Profiles&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ProfileConfigSourceInterceptor&lt;/code&gt; allows multiple configurations with the same name and selects them via
a profile property.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be able to set properties with the same name, each property needs to be prefixed with &lt;code&gt;%&lt;/code&gt; followed by the profile
name and a dot:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot; class=&quot;language-properties hljs&quot;&gt;my.prop=1234
%dev.my.prop=5678&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lookup is always performed with the &lt;code&gt;my.prop&lt;/code&gt; property name. To use the profile &lt;code&gt;dev&lt;/code&gt;, the configuration
&lt;code&gt;smallrye.config.profile=dev&lt;/code&gt; has to be set in any valid &lt;code&gt;ConfigSource&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When looking up the property &lt;code&gt;my.prop&lt;/code&gt; with the &lt;code&gt;dev&lt;/code&gt; profile active, the value is &lt;code&gt;5678&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only one profile can be active at any given time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;api_enhancements&quot;&gt;API Enhancements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aside from interceptors, a few additional API enhancements shipped with the latest version of SmallRye Config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConfigValue&lt;/code&gt; - The ConfigValue is a metadata object that holds additional information after the lookup of a
configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConfigValueConfigSource&lt;/code&gt; - Extends the original &lt;code&gt;ConfigSource&lt;/code&gt; to expose methods that return a &lt;code&gt;ConfigValue&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SmallRyeConfigBuilder#withSecretKeys&lt;/code&gt; - Hide configuration properties that contain passwords or other kinds of
secrets to prevent accidental exposure of such values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the new features detailed here are experimental. The team is happy with them, and they had careful consideration
when designed. We cannot guarantee that they won&amp;#8217;t suffer any changes in the next few releases, especially considering
that the SmallRye team is also pushing to have these added to the MicroProfile Config specification, which may require
some changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shouldn&amp;#8217;t discourage developers to use these new features. We believe these add a lot of utility and improve the
developer experience regarding configuration of applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please, feel free to drop us any feedback in the &lt;a href=&quot;mailto:smallrye@googlegroups.com&quot;&gt;SmallRye Mailing List&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional_resources&quot;&gt;Additional Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/smallrye/smallrye-config/releases/tag/1.8.0&quot;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://smallrye.io/docs/smallrye-config/index.html&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Roberto Cortez</name><email>radcortez@yahoo.com</email></author><category term="microprofile" /><category term="smallrye" /><category term="config" /></entry></feed>